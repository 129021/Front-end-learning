1. 构造函数和原型
1.1 概述
在典型的OOP语言中（如Java），都存在类的概念，类就是对象的模板，对象就是类的实例，但是在ES6之前，js中并没有引入类的概念

ES6，全称ECMAScript6.0,2015年6月发布，但是目前的浏览器的JavaScript是ES5版本，大多数高版本的浏览器也支持ES6，不过只实现了ES6的部分特性和功能

在ES6之前，对象不是基于类创建的，而是用一种称为构建函数的特殊函数来定义对象和他们的特征

创建对象可以通过以下三种方式：
对象字面量
new Object()
自定义构造函数


1.2 构造函数
JavaScript的构造函数中可以添加一些成员，可以在构造函数本身上添加，也可以在构造函数内部的this上添加。通过这两种方式添加的成员，就分别称为静态成员和实例成员

静态成员：在构造函数本身上添加的成员称为静态成员，只能由构造函数本身来访问
实例成员：在构造函数内部创建的对象成员称为实例成员，只能由实例化的对象来访问


1.3 构造函数的问题
构造函数方法很好用，但是存在浪费内存的问题


1.4 构造函数原型prototype
构造函数通过原型分配的函数是所有对象所共享的

JavaScript规定，每一个构造函数都有一个prototype属性，指向另一个对象，注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有

我们可以把那些不变的方法，直接定义在prototype对象上，这样所有的对象的实例就可以共享这些方法

原型是什么？ 一个对象，我们也称prototype为原型对象
原型的作用是什么？ 共享对象


1.5 对象原型__proto__
对象都会有一个属性__proto__指向构造函数的prototype原型对象，之所以我们对象可以使用构造函数prototype原型对象的属性和方法，就是因为对象有__proto__原型的存在

__proto__对象原型和原型对象prototype是等价的

__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说是一条线路，但它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象prototype
（图：原型对象）


1.6 constructor构造函数
对象原型__proto__和构造函数prototype原型对象里面都有一个属性constructor属性，constructor我们称之为构造函数，因为它指回构造函数本身

constructor主要用于记录该对象引用于那个构造函数，它可以让原型对象重新指向原来的构造函数


1.7 构造函数、实例、原型对象三者之间的关系
（图：构造函数实例原型对象三者之间的关系）


1.8原型链
(图：原型链)


1.9 JavaScript的成员查找机制（规则）
按照原型链的机制查找

当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性
如果没有就查找它的原型（也就是__proto__指向的prototype原型对象）
如果还没有就查找原型对象的原型（Object的原型对象）
以此类推一直找到Object为止（null）
__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说是一条路线


1.10原型对象的this指向
        // 在构造函数中，里面的this指向的是对象实例  ldh


1.11 扩展内置对象
可以通过原型对象，对原来的内置对象进行扩展自定义的方法。比如给数组增加自定义求偶数和的功能

